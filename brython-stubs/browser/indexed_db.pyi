from _typeshed import Incomplete
from collections.abc import Generator

class EventListener:
    def __init__(self, events=...) -> None: ...
    def append(self, event) -> None: ...
    def fire(self, e) -> None: ...

class IndexedDB:
    def __init__(self) -> None: ...
    def open(self, name, onsuccess, version: float = ..., onerror: Incomplete | None = ..., onupgradeneeded: Incomplete | None = ...) -> None: ...
    def transaction(self, entities, mode: str = ...): ...

class Transaction:
    def __init__(self, transaction) -> None: ...
    def objectStore(self, name): ...

class ObjectStore:
    def __init__(self, objectStore) -> None: ...
    def clear(self, onsuccess: Incomplete | None = ..., onerror: Incomplete | None = ...) -> None: ...
    def put(self, obj, key: Incomplete | None = ..., onsuccess: Incomplete | None = ..., onerror: Incomplete | None = ...) -> None: ...
    def add(self, obj, key, onsuccess: Incomplete | None = ..., onerror: Incomplete | None = ...) -> None: ...
    def delete(self, index, onsuccess: Incomplete | None = ..., onerror: Incomplete | None = ...) -> None: ...
    def query(self, *args) -> None: ...
    def fetchall(self) -> Generator[Incomplete, None, None]: ...
    def get(self, key, onsuccess: Incomplete | None = ..., onerror: Incomplete | None = ...) -> None: ...
